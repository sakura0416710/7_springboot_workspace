<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- default.xml : 변환규칙, 패턴속성 및 일반적인 로거 구성을 제공함  -->
	<include resource="org/springframework/boot/logging/logback/defaults.xml"/>
	<!-- console-appender.xml : 콘솔 로그 패턴을 사용하여 ConsoleAppender 추가
	( ~~ Appender : 콘솔이 출력되는 위치를 말함. 어디에 로그를 출력할지 정할 수 있음.
	ex. consoleAppender : 콘솔에 로그 출력하기
	ex. fileAppender : 파일에 로그 출력하기 -->
	<include resource="org/springframework/boot/logging/logback/console-appender.xml"/>
	
	<!-- 모든 자식 logger들의 출력이 rootLogger를 통해 이루어짐 : 루트로거-->
	<root level="INFO">
		<appender-ref ref="CONSOLE"/>
	</root>   
	
	<!--appender : 전달된 로그를 어디애 출력할지 결정 
		ConsoleAppender : 로그를 콘솔에 출력함
		JDBCAppender : 로그를 DB에 출력
		FileAppender : 로그를 파일에 출력 (하나의 지정파일에 로그를 계속 남기면 크기가 너무 커져서 지속적인 로그관리가 어려워진다) 
		RollingFileAppender :  FileAppender를 보완한 개념, 일정 조건 후 기존파일을 백업파일로 바꾸고 다시 처음부터 시작함
		ex.dailyRollingFileAppender
	Layout : 로그를 어떤 형식으로 출력할지 결정
		DateLayout : 
		HTMLLayout : 
		PatternLayout : 
		SimpleLayout : 
		XMLLayout : 
		
		%p : debug, info, warn, error, fatal등의 priority출력
		%m : 로그 내용 출력
		%d : 로그이벤트가 발생한 시간 출력(프로그램 실행속도가 느려질 수 있음)
			포맷형식 : %d{HH:mm:ss, SSS} 같은 형태로 사용(SimpleDateFormat에 따른 포맷팅)
		%t : 로그 이벤트가 발생된 스레드 이름 출력
		%% : %표시
		%n : 개행문자
		%c : package출력 
			n(숫자)만큼의 package를 하단부터 역으로 출력
			a.b.c처럼 되어있을 때 %c{2}는 b,c로 나옴
		%C{n} : 클래스 명 출력
				n에 대한 내용은 위와 같음
				->내용은 이렇지만 %c와 %C에 대한 차이는 크게 없음
		%F  :로깅이 발생한 프로그램 파일명 출력
		%l : 로깅이 발생한 caller의 정보 출력
		%L : 로깅이 발생한 caller의 라인 수 출력
		%M : 로깅이 발생한 method이름 출력
		%r : 앱 시작 이후 로깅이 발생한 시점의 시간(milliseconds)출력
		
		
		-->
		
		<!-- 콘솔에 찍는 Appender -->
	<appender name="myConsoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{MM-dd HH:mm:ss}%-5p %c %M - %m%n</pattern>
		</encoder>
	</appender>
	
	
	<appender name="myFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 파일경로 설정 -->
		<file>D:/logs/member/login.log</file>
		<!-- 출력 패턴 설정 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{yy-MM-dd HH:mm:ss} [%p] %c{1}.%M>%L - %m%n</pattern>
		</encoder>
		
		<!-- Rolling 중에서도 선택할 정책 : TimeBased는 시간에 따라 ( Daily ) -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>D:/logs/member/login.log.%d{yyyyMMdd}</fileNamePattern>
		</rollingPolicy>
	</appender>
	
	<logger name="kh.springboot.member.controller.MemberController" level="debug">
		<appender-ref ref="myConsoleAppender"/>
		<appender-ref ref="myFileAppender"/>
	</logger>
	
	<logger name="kh.springboot.common.interceptor.LogInterceptor" level="debug" additivity="false">
		<appender-ref ref="myFileAppender"/>
	</logger>
</configuration>